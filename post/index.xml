<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 老崔博客</title>
    <link>http://ijs.me/post/</link>
    <description>Recent content in Posts on 老崔博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 May 2018 08:28:02 +0800</lastBuildDate>
    
	<atom:link href="http://ijs.me/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>调整 Github 首页布局</title>
      <link>http://ijs.me/2018/05/18/github-index-layout/</link>
      <pubDate>Fri, 18 May 2018 08:28:02 +0800</pubDate>
      
      <guid>http://ijs.me/2018/05/18/github-index-layout/</guid>
      <description>GitHub 首页的改版好蛋疼，原先的右栏换成了左栏，左栏换成了右栏。看着好别扭，原先的看习惯了，于是想把 Github 的首页布局改回去。
首先我是用的 Chrome 浏览器，下载 Tampermonkey ,Tampermonkey 也有其它浏览器版本，可以去 官网 下载你使用的浏览器对应版本。然后打开GitHub首页，点击插件图标，点添加新脚本。
在新打开的页面中，添加下面一行代码：
document.getElementsByClassName(&#39;column&#39;)[0].style.float=&amp;quot;right&amp;quot;  改下 @match, 在https://github.com/ 后添加 *, 由于 Chrome 插件应该是不支持正则表达式中的 ?, https://developer.chrome.com/extensions/match_patterns 可能所有的 Chrome 插件都支持个通配符 *, 所以想匹配 https://github.com/orgs/xxx 其中xxx代表任意字符只能加个 * 了，不过这样做满足了匹配首页和 orgs 页面的要求，由于其它页面并没有 column 这个 class,所以对其它页面无影响。
按 Ctrl + S 保存，然后就可以看到 Github 首页布局恢复了。
完整的代码如下:
// ==UserScript== // @name New Userscript // @namespace http://tampermonkey.net/ // @version 0.1 // @description try to take over the world! // @author You // @match https://github.</description>
    </item>
    
    <item>
      <title>Axios CancelToken 取消请求</title>
      <link>http://ijs.me/2018/05/11/axios-canceltoken/</link>
      <pubDate>Fri, 11 May 2018 13:26:11 +0800</pubDate>
      
      <guid>http://ijs.me/2018/05/11/axios-canceltoken/</guid>
      <description>背景 项目所用的前端框架为React，不过下面所讲的场景和React没啥关系，其他前端架构也会有类似问题。
假如说页面中有两项菜单可供选择，这两项菜单下的内容是同一个页面，同一个组件，两项菜单下的页面结构是一样的，只是数据不同，数据比如都是使用 axios 请求 REST API 获取到的，然后用 setState 把 API 传过来的值展示到页面中。
axios.get(&#39;/test&#39;, { params: { type: &#39;fruit&#39; } }) .then(function (res) { if (res.status === 200) { this.setState({ data: res.data } } })  项目初次加载和点击菜单选项时都会执行类似于上面的请求 API 的方法。
正常点击切换两项菜单时问题不大，能正确展示数据，当我点击很快时，由于向 API 请求数据需要时间，就可能把某次请求pending，然后 setState 就可能会把比如第一个菜单项下的内容展示到第二个菜单下。
解决方案 按钮点击很快这件事本身可以做处理，但我感觉限流也是权宜之计，比如极端情况，某段时间 API 返回数据挺慢，在限流的时间内还没返回数据，这样 setState 还是有可能把数据展示错乱。关键在于请求 pending 时就切换菜单会出现数据错乱。
如果我们在发新的请求之前能把之前 pending 的请求取消掉就会解决这个问题，这就是 axios 的 CancelToken 所做的事情。
我们在点击菜单项绑定的函数中每次定义下面两个变量
const CancelToken = axios.CancelToken const source = CancelToken.source()  注意上面两个变量初始化时每次切换菜单项时都要重新定义，不然只定义一次的话，上面两个变量的值只是初始化时的值。我们可以把上面两个变量写到我们发送请求的前面，然后把发送请求包装成一个函数，在 componentDidMount() 和 切换菜单项时调用这个函数。然后完整的代码如下。</description>
    </item>
    
    <item>
      <title>当React State 为 Array 时如何 setState</title>
      <link>http://ijs.me/2018/05/08/react-state-array-setstate/</link>
      <pubDate>Tue, 08 May 2018 13:14:20 +0800</pubDate>
      
      <guid>http://ijs.me/2018/05/08/react-state-array-setstate/</guid>
      <description>某个数据类型为 Array 的 state，这里我们假设这个 state 名为 test，然后我们在组件的 constructor 里初始化这个 state:
constructor(props) { super(props) this.state = { test: [] } }  数据使用 WebSocket 通信，当来了新数据时，比如我们接收到的数据为 data, data里有一个或者多个对象的数组，类似于这样 [{},{}], 我们想把data里的数据存到 this.state.test 数组的头部，该怎么做呢，我们不能直接用 unshift 操作，因为 setState 才会触发 render() 函数重新渲染UI。
也不能这样做：
this.setState({ test: this.state.test.unshift(...data) })  因为 unshift 返回的是新的长度，所以上面的做法是错误的。
正确的做法是：
this.setState({ test: [...data, ...this.state.test] })  ... 是扩展运算符，可以把数组转为用逗号分隔的参数序列。</description>
    </item>
    
    <item>
      <title>React 异步引入外部js</title>
      <link>http://ijs.me/2018/05/04/react-script-async/</link>
      <pubDate>Fri, 04 May 2018 18:47:26 +0800</pubDate>
      
      <guid>http://ijs.me/2018/05/04/react-script-async/</guid>
      <description>起因 最近在做项目时，需要用到第三方的人机验证码服务，而这项服务没有npm包，所以就需要引入 &amp;lt;script&amp;gt;，我们只需要在需要在用到这个人机验证服务的component里加入以下代码就可以实现异步加载 &amp;lt;script&amp;gt;：
componentDidMount () { const script = document.createElement(&amp;quot;script&amp;quot;) script.src = &amp;quot;//captcha.luosimao.com/static/dist/api.js&amp;quot; script.async = true document.body.appendChild(script) }  更进一步 你有没有思考过为啥引入外部文件时经常省略 http: 或者 https: 呢，其实这样做是有原因的：
//captcha.luosimao.com/static/dist/api.js 这种写法是相对路径写法，浏览器会自动加上 http: 或者 https:补全为绝对路径，补全原则是与我们当前页面使用的协议相同。</description>
    </item>
    
    <item>
      <title>VsCode 扩展推荐</title>
      <link>http://ijs.me/2018/04/30/vscode-extensions/</link>
      <pubDate>Mon, 30 Apr 2018 23:56:14 +0800</pubDate>
      
      <guid>http://ijs.me/2018/04/30/vscode-extensions/</guid>
      <description>Auto Close Tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text
Auto Import - ES6, TS, JSX, TSX: Automatically finds, parses and provides code actions and code completion for all available imports. Works with JavaScript and TypeScript. [Forked]</description>
    </item>
    
    <item>
      <title>Git 回滚到某一版本</title>
      <link>http://ijs.me/2018/04/25/git-reset-hard/</link>
      <pubDate>Wed, 25 Apr 2018 00:32:03 +0800</pubDate>
      
      <guid>http://ijs.me/2018/04/25/git-reset-hard/</guid>
      <description>起因 这两天写练习项目时用了eslint, 然后发现 yarn add eslint 或者 yarn global add eslint 无效，只能使用 npm install -g eslint 来按安装， eslint --init才会在命令行里起作用，随后发现带来了一些问题，并且感觉Eslint并不是理想的代码规范方式，而且还有丑陋的错误误报，遂决定暂时弃用 Eslint，卸载Eslint后，项目跑的时候总是时不时奇怪的就因为Eslint跑不起来了，所以决定把代码回滚到使用Eslint以前的版本。
显示提交的log $ git log -5 commit 2497b4715fad2f022e5fee3e83341b19d7fa8bf7 Author: xxx &amp;lt;xxx@xxx.com&amp;gt; Date: Mon Apr 23 01:26:54 2018 +0800 aaa commit 23faaf5ba3b5104c3f93275d9441439d31e06a74 Author: xxx &amp;lt;xxx@xxx.com&amp;gt; Date: Sun Apr 22 21:09:42 2018 +0800 bbb commit a0c8880200f8de959a12686faa7ce3b2d37b24b4 Author: xxx &amp;lt;xxx@xxx.com&amp;gt; Date: Sun Apr 22 15:27:55 2018 +0800 ccc commit b736de663899dc24d362d93ebb32f7548402cc5b Author: xxx &amp;lt;xxx@xxx.com&amp;gt; Date: Sat Apr 21 23:19:45 2018 +0800 ddd commit ee7c7a7a6c3bc7f2698b2a0b4b1bcbe0dce93722 Author: xxx &amp;lt;xxx@xxx.</description>
    </item>
    
    <item>
      <title>Git 合并某个分支下的某个文件</title>
      <link>http://ijs.me/2018/04/23/git-merge-branch-file/</link>
      <pubDate>Mon, 23 Apr 2018 23:22:52 +0800</pubDate>
      
      <guid>http://ijs.me/2018/04/23/git-merge-branch-file/</guid>
      <description>查看远程分支 git branch -r  拉取远程分支并创建本地分支 git checkout -b 本地分支名x origin/远程分支名x  合并分支的某个文件 现在我们想把我们刚创建的本地分支 x 的某个文件 file 或者文件夹 folder 内的文件合并到本地开发的分支 develop 上，而不是把整个分支都合并过来，方法如下：
先切换到分支 develop 上
git checkout develop  然后执行
git checkout --patch A file  其中 file 可以换成某个文件夹 folder，然后根据自己的需要按 y 或者 n。</description>
    </item>
    
    <item>
      <title>Hugo 的使用</title>
      <link>http://ijs.me/2018/04/22/hugo-usage/</link>
      <pubDate>Sun, 22 Apr 2018 21:27:08 +0800</pubDate>
      
      <guid>http://ijs.me/2018/04/22/hugo-usage/</guid>
      <description>创建一篇文章 hugo new post/2018/hugo-usage.md  生成的markdown文档头部信息加上 slug 字段表示URL链接信息
本地生成预览 hugo server  生成静态页到 public 文件夹 hugo  部署到Github Pages上 把public文件夹下的内容推送到相应的Github Pages仓库里。</description>
    </item>
    
    <item>
      <title>存储React组件中的数据何时用State或者This</title>
      <link>http://ijs.me/2018/04/10/react-component-data-state-this/</link>
      <pubDate>Tue, 10 Apr 2018 00:59:22 +0800</pubDate>
      
      <guid>http://ijs.me/2018/04/10/react-component-data-state-this/</guid>
      <description>为什么需要this React组件内的数据一般用state来存储，但是如果所有的除props之外的数据都用state来存储的话，前些天做项目时就发现一个问题。
我遇到的那种场景，this.setState改变一个state的值，然后立即去fetch一个url中带有这个state参数的api，就会导致这个state的值是上一次的值，fetch到的数据是旧的，setState执行慢了一点点。本想加个setTimeout延迟几毫秒给解决掉，又一想，这样不是正经程序员所为，就把这个state改为this.x=‘123’这样的属性，这样就能解决setState异步执行带来的问题。</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://ijs.me/2018/04/01/first-post/</link>
      <pubDate>Sun, 01 Apr 2018 04:51:29 +0800</pubDate>
      
      <guid>http://ijs.me/2018/04/01/first-post/</guid>
      <description> 测试 Hugo </description>
    </item>
    
  </channel>
</rss>